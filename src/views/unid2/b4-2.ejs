<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Untitled Document</title>
<script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>
<link type="text/css" href="/css/estilos.css" rel="stylesheet">

</head>

<body>
   <h2><strong>2.4.2 Funciones con y sin argumentos.</strong></h2>
   <h3 align="right"><a href="/users/b4-1"><img src="/css/images/next2.jpg" width="50" height="50" alt="" /></a><a href="/users/b4-3"><img src="/css/images/next.jpg" width="50" height="50" alt="" /></a>&nbsp;&nbsp;</h3>
    <div class="div-texto">
        <p>Los argumentos son siempre objetos. Sus tipos pueden ser: escalares; estructuras; uniones, o enumeraciones; clases definidas por 
            el usuario; punteros o referencias a estructuras y uniones, o punteros a funciones, a clases o a matrices. El tipo void está 
            permitido como único parámetro formal. Significa que la función no recibe ningún argumento. Todos los parámetros de una función 
            tienen ámbito del bloque de la propia función y la misma duración automática que la función.</p>
        <p> El único especificador de almacenamiento que se permite es register. En la declaración de parámetros también pueden utilizarse 
            los modificadores volatile y const. Este último se utiliza cuando se pasan argumentos por referencia y queremos garantizar que 
            la función no modificará el valor recibido. Ejemplo: </p>

           
    </div>
    <div class="scroll">
        <pre class="prettyprint linenums:1"><code class="language-c">
        int func(void) {...}                  // sin parámetros
        int func(T1 t1, T2 t2, T3 t3=1) {...} /*tres parámetros simples, uno con argumento por  defecto*/
        int func(T1* ptr1, T2& tref) {...}    // los argumentos son un puntero y una referencia.
        int func(register int i) {...}        // Petición de uso de registro para argumento (entero)
        int func(char* str,...) {...}         // Una cadena
    </code></pre></div>
</body>
</html>